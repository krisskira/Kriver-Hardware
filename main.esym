D G "MODE_EXIT" 12 39 "3"
D G "__PCH__" 0 108 ""5.015""
D G "__DEVICE__" 0 108 "4620"
D G "__DATE__" 0 108 ""24-dic.-17""
D G "__TIME__" 0 108 ""00:43:19"" "Company Name:  KRIVER DEVICE"
c L "set_tris_a" 2 1 6 "FUNCTION"
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
v L "value" 2 46 "int8" `60 
f B "set_tris_d" 2 46 "void(int8 value)" `59 
v L "value" 2 47 "int8" `62 
f B "set_tris_e" 2 47 "void(int8 value)" `61 
f B "get_tris_a" 2 48 "int8()" `63 
f B "get_tris_b" 2 49 "int8()" `64 
f B "get_tris_c" 2 50 "int8()" `65 
f B "get_tris_d" 2 51 "int8()" `66 
f B "get_tris_e" 2 52 "int8()" `67 
v L "value" 2 53 "int8" `69 
f B "output_a" 2 53 "void(int8 value)" `68 
v L "value" 2 54 "int8" `71 
f B "output_b" 2 54 "void(int8 value)" `70 
v L "value" 2 55 "int8" `73 
f B "output_c" 2 55 "void(int8 value)" `72 
v L "value" 2 56 "int8" `75 
f B "output_d" 2 56 "void(int8 value)" `74 
v L "value" 2 57 "int8" `77 
f B "output_e" 2 57 "void(int8 value)" `76 
f B "input_a" 2 58 "int8()" `78 
f B "input_b" 2 59 "int8()" `79 
f B "input_c" 2 60 "int8()" `80 
f B "input_d" 2 61 "int8()" `81 
f B "input_e" 2 62 "int8()" `82 
f B "input_change_a" 2 63 "int8()" `83 
f B "input_change_b" 2 64 "int8()" `84 
f B "input_change_c" 2 65 "int8()" `85 
f B "input_change_d" 2 66 "int8()" `86 
f B "input_change_e" 2 67 "int8()" `87 
v L "pin" 2 68 "int16" `89 
f B "input" 2 68 "int8(int16 pin)" `88 
v L "pin" 2 69 "int16" `91 
f B "input_state" 2 69 "int8(int16 pin)" `90 
v L "pin" 2 70 "int16" `93 
f B "output_low" 2 70 "void(int16 pin)" `92 
v L "pin" 2 71 "int16" `95 
f B "output_high" 2 71 "void(int16 pin)" `94 
v L "pin" 2 72 "int16" `97 
f B "output_toggle" 2 72 "void(int16 pin)" `96 
v L "pin" 2 73 "int16" `99 
v L "level" 2 73 "int8" `100 
f B "output_bit" 2 73 "void(int16 pin,int8 level)" `98 
v L "pin" 2 74 "int16" `102 
f B "output_float" 2 74 "void(int16 pin)" `101 
v L "pin" 2 75 "int16" `104 
f B "output_drive" 2 75 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 79 "31744"
d G "PIN_A1" 2 80 "31745"
d G "PIN_A2" 2 81 "31746"
d G "PIN_A3" 2 82 "31747"
d G "PIN_A4" 2 83 "31748"
d G "PIN_A5" 2 84 "31749"
d G "PIN_A6" 2 85 "31750"
d G "PIN_A7" 2 86 "31751"
d G "PIN_B0" 2 88 "31752"
d G "PIN_B1" 2 89 "31753"
d G "PIN_B2" 2 90 "31754"
d G "PIN_B3" 2 91 "31755"
d G "PIN_B4" 2 92 "31756"
d G "PIN_B5" 2 93 "31757"
d G "PIN_B6" 2 94 "31758"
d G "PIN_B7" 2 95 "31759"
d G "PIN_C0" 2 97 "31760"
d G "PIN_C1" 2 98 "31761"
d G "PIN_C2" 2 99 "31762"
d G "PIN_C3" 2 100 "31763"
d G "PIN_C4" 2 101 "31764"
d G "PIN_C5" 2 102 "31765"
d G "PIN_C6" 2 103 "31766"
d G "PIN_C7" 2 104 "31767"
d G "PIN_D0" 2 106 "31768"
d G "PIN_D1" 2 107 "31769"
d G "PIN_D2" 2 108 "31770"
d G "PIN_D3" 2 109 "31771"
d G "PIN_D4" 2 110 "31772"
d G "PIN_D5" 2 111 "31773"
d G "PIN_D6" 2 112 "31774"
d G "PIN_D7" 2 113 "31775"
d G "PIN_E0" 2 115 "31776"
d G "PIN_E1" 2 116 "31777"
d G "PIN_E2" 2 117 "31778"
d G "PIN_E3" 2 118 "31779"
d G "FALSE" 2 121 "0"
d G "TRUE" 2 122 "1"
d G "BYTE" 2 124 "int8"
d G "BOOLEAN" 2 125 "int1"
d G "getc" 2 127 "getch"
d G "fgetc" 2 128 "getch"
d G "getchar" 2 129 "getch"
d G "putc" 2 130 "putchar"
d G "fputc" 2 131 "putchar"
d G "fgets" 2 132 "gets"
d G "fputs" 2 133 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f B "restart_cause" 2 138 "int8()" `105 
f B "reset_cpu" 2 139 "void()" `106 
f B "sleep" 2 140 "void()" `107 
v L "type" 2 141 "int8" `109 
f G "sleep" 2 141 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 143 "7"
d G "MCLR_FROM_SLEEP" 2 144 "11"
d G "MCLR_FROM_RUN" 2 145 "15"
d G "NORMAL_POWER_UP" 2 146 "12"
d G "BROWNOUT_RESTART" 2 147 "14"
d G "WDT_FROM_SLEEP" 2 148 "3"
d G "RESET_INSTRUCTION" 2 149 "0"
d G "SLEEP_FULL" 2 152 "0" "Default"
d G "SLEEP_IDLE" 2 153 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 5 "FUNCTION"
v L "mode" 2 160 "int8" `111 
f B "setup_timer_0" 2 160 "void(int8 mode)" `110 
v L "value" 2 161 "int16" `113 
f B "set_timer0" 2 161 "void(int16 value)" `112 
f B "get_timer0" 2 162 "int16()" `114 
v L "mode" 2 163 "int8" `116 
v L "prescaler" 2 163 "int8" `117 
f B "setup_counters" 2 163 "void(int8 mode,int8 prescaler)" `115 
v L "value" 2 164 "int16" `119 
f B "set_rtcc" 2 164 "void(int16 value)" `118 
f B "get_rtcc" 2 165 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 167 "0"
d G "T0_EXT_L_TO_H" 2 168 "32"
d G "T0_EXT_H_TO_L" 2 169 "48"
d G "T0_DIV_1" 2 171 "8"
d G "T0_DIV_2" 2 172 "0"
d G "T0_DIV_4" 2 173 "1"
d G "T0_DIV_8" 2 174 "2"
d G "T0_DIV_16" 2 175 "3"
d G "T0_DIV_32" 2 176 "4"
d G "T0_DIV_64" 2 177 "5"
d G "T0_DIV_128" 2 178 "6"
d G "T0_DIV_256" 2 179 "7"
d G "T0_OFF" 2 181 "0x80"
d G "T0_8_BIT" 2 183 "0x40"
d G "RTCC_INTERNAL" 2 185 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 186 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 187 "48"
d G "RTCC_DIV_1" 2 188 "8"
d G "RTCC_DIV_2" 2 189 "0"
d G "RTCC_DIV_4" 2 190 "1"
d G "RTCC_DIV_8" 2 191 "2"
d G "RTCC_DIV_16" 2 192 "3"
d G "RTCC_DIV_32" 2 193 "4"
d G "RTCC_DIV_64" 2 194 "5"
d G "RTCC_DIV_128" 2 195 "6"
d G "RTCC_DIV_256" 2 196 "7"
d G "RTCC_OFF" 2 197 "0x80"
d G "RTCC_8_BIT" 2 198 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
v L "mode" 2 209 "int16" `122 
f B "setup_wdt" 2 209 "void(int16 mode)" `121 
f B "restart_wdt" 2 210 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 212 "0x100"
d G "WDT_OFF" 2 213 "0"
d G "WDT_4MS" 2 215 "0x300"
d G "WDT_8MS" 2 216 "0x500"
d G "WDT_16MS" 2 217 "0x700"
d G "WDT_32MS" 2 218 "0x900"
d G "WDT_64MS" 2 219 "0xB00"
d G "WDT_128MS" 2 220 "0xD00"
d G "WDT_256MS" 2 221 "0xF00"
d G "WDT_512MS" 2 222 "0x1100"
d G "WDT_1S" 2 223 "0x1300"
d G "WDT_2S" 2 224 "0x1500"
d G "WDT_4S" 2 225 "0x1700"
d G "WDT_8S" 2 226 "0x1900"
d G "WDT_16" 2 227 "0x1B00"
d G "WDT_32S" 2 228 "0x1D00"
d G "WDT_64S" 2 229 "0x1F00"
d G "WDT_128S" 2 230 "0x2100"
c L "restart_wdt" 2 1 3 "FUNCTION"
v L "mode" 2 236 "int16" `125 
f B "setup_timer_1" 2 236 "void(int16 mode)" `124 
f B "get_timer1" 2 237 "int16()" `126 
v L "value" 2 238 "int16" `128 
f B "set_timer1" 2 238 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 241 "0"
d G "T1_INTERNAL" 2 242 "0x85"
d G "T1_EXTERNAL" 2 243 "0x87"
d G "T1_EXTERNAL_SYNC" 2 244 "0x83"
d G "T1_CLK_OUT" 2 246 "8"
d G "T1_DIV_BY_1" 2 248 "0"
d G "T1_DIV_BY_2" 2 249 "0x10"
d G "T1_DIV_BY_4" 2 250 "0x20"
d G "T1_DIV_BY_8" 2 251 "0x30"
c L "set_timer1" 2 1 3 "FUNCTION"
v L "mode" 2 256 "int8" `130 
v L "period" 2 256 "int8" `131 
v L "postscale" 2 256 "int8" `132 
f B "setup_timer_2" 2 256 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 2 257 "int8()" `133 
v L "value" 2 258 "int8" `135 
f B "set_timer2" 2 258 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 260 "0"
d G "T2_DIV_BY_1" 2 261 "4"
d G "T2_DIV_BY_4" 2 262 "5"
d G "T2_DIV_BY_16" 2 263 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
v L "mode" 2 268 "int16" `137 
f B "setup_timer_3" 2 268 "void(int16 mode)" `136 
f B "get_timer3" 2 269 "int16()" `138 
v L "value" 2 270 "int16" `140 
f B "set_timer3" 2 270 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 273 "0"
d G "T3_INTERNAL" 2 274 "0x85"
d G "T3_EXTERNAL" 2 275 "0x87"
d G "T3_EXTERNAL_SYNC" 2 276 "0x83"
d G "T3_DIV_BY_1" 2 278 "0"
d G "T3_DIV_BY_2" 2 279 "0x10"
d G "T3_DIV_BY_4" 2 280 "0x20"
d G "T3_DIV_BY_8" 2 281 "0x30"
c L "set_timer3" 2 1 4 "FUNCTION"
v L "mode" 2 287 "int32" `142 
f B "setup_ccp1" 2 287 "void(int32 mode)" `141 
v L "mode" 2 288 "int32" `144 
v L "pwm" 2 288 "int8" `145 
f G "setup_ccp1" 2 288 "void(int32 mode,int8 pwm)" `143 
v L "value" 2 289 "int16" `147 
f B "set_pwm1_duty" 2 289 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 291 "0"
d G "CCP_CAPTURE_FE" 2 292 "4"
d G "CCP_CAPTURE_RE" 2 293 "5"
d G "CCP_CAPTURE_DIV_4" 2 294 "6"
d G "CCP_CAPTURE_DIV_16" 2 295 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 296 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 297 "9"
d G "CCP_COMPARE_INT" 2 298 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 299 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 300 "0xB"
d G "CCP_PWM" 2 301 "0xC"
d G "CCP_PWM_PLUS_1" 2 302 "0x1c"
d G "CCP_PWM_PLUS_2" 2 303 "0x2c"
d G "CCP_PWM_PLUS_3" 2 304 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 310 "0x48"
d G "T3_CCP2" 2 311 "0x8"
d G "CCP_PWM_H_H" 2 314 "0x0c"
d G "CCP_PWM_H_L" 2 315 "0x0d"
d G "CCP_PWM_L_H" 2 316 "0x0e"
d G "CCP_PWM_L_L" 2 317 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 319 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 320 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 321 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 323 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 324 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 325 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 326 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 327 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 328 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 329 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 331 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 332 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 333 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 335 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 336 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 337 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 339 "0x80000000"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
v L "mode" 2 343 "int32" `152 
f B "setup_ccp2" 2 343 "void(int32 mode)" `151 
v L "mode" 2 344 "int32" `154 
v L "pwm" 2 344 "int8" `155 
f G "setup_ccp2" 2 344 "void(int32 mode,int8 pwm)" `153 
v L "value" 2 345 "int16" `157 
f B "set_pwm2_duty" 2 345 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 1 5 "FUNCTION"
v L "mode" 2 354 "int8" `162 
f B "setup_psp" 2 354 "void(int8 mode)" `161 
f B "psp_output_full" 2 355 "int8()" `163 
f B "psp_input_full" 2 356 "int8()" `164 
f B "psp_overflow" 2 357 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 359 "0x10"
d G "PSP_DISABLED" 2 360 "0"
c L "psp_overflow" 2 1 3 "FUNCTION"
v L "mode" 2 367 "int32" `168 
f B "setup_spi" 2 367 "void(int32 mode)" `167 
v L "value" 2 368 "int8" `170 
f B "spi_write" 2 368 "void(int8 value)" `169 
f B "spi_read" 2 369 "int8()" `171 
v L "value" 2 370 "int8" `173 
f G "spi_read" 2 370 "int8(int8 value)" `172 
f B "spi_data_in" 2 371 "int8()" `174 
v L "mode" 2 372 "int32" `176 
f B "setup_spi2" 2 372 "void(int32 mode)" `175 
v L "value" 2 373 "int8" `178 
f B "spi_write2" 2 373 "void(int8 value)" `177 
f B "spi_read2" 2 374 "int8()" `179 
v L "value" 2 375 "int8" `181 
f G "spi_read2" 2 375 "int8(int8 value)" `180 
f B "spi_data_in2" 2 376 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 378 "0x00"
d G "SPI_MASTER" 2 379 "0x20"
d G "SPI_SLAVE" 2 380 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 381 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 382 "0x00"
d G "SPI_CLK_DIV_4" 2 383 "0x00"
d G "SPI_CLK_DIV_16" 2 384 "0x01"
d G "SPI_CLK_DIV_64" 2 385 "0x02"
d G "SPI_CLK_T2" 2 386 "0x03"
d G "SPI_SS_DISABLED" 2 387 "0x01"
d G "SPI_XMIT_L_TO_H" 2 389 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 390 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 392 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 393 "0x8000"
d G "SPI_L_TO_H" 2 396 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 397 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 2 "FUNCTION"
v L "baud" 2 401 "int32" `184 
f B "setup_uart" 2 401 "void(int32 baud)" `183 
v L "baud" 2 402 "int32" `186 
v L "stream" 2 402 "int8" `187 
f G "setup_uart" 2 402 "void(int32 baud,int8 stream)" `185 
v L "baud" 2 403 "int32" `189 
v L "stream" 2 403 "int8" `190 
v L "clock" 2 403 "int32" `191 
f G "setup_uart" 2 403 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 2 404 "int32" `193 
f B "set_uart_speed" 2 404 "void(int32 baud)" `192 
v L "baud" 2 405 "int32" `195 
v L "stream" 2 405 "int8" `196 
f G "set_uart_speed" 2 405 "void(int32 baud,int8 stream)" `194 
v L "baud" 2 406 "int32" `198 
v L "stream" 2 406 "int8" `199 
v L "clock" 2 406 "int32" `200 
f G "set_uart_speed" 2 406 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 410 "2"
d G "UART_DATA" 2 411 "4"
d G "UART_AUTODETECT" 2 412 "8"
d G "UART_AUTODETECT_NOWAIT" 2 413 "9"
d G "UART_WAKEUP_ON_RDA" 2 414 "10"
d G "UART_SEND_BREAK" 2 415 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 419 "int32" `202 
f B "setup_comparator" 2 419 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 421 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 422 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 423 "0xbcf05"
d G "NC_NC_NC_NC" 2 424 "0x0ff07"
d G "A0_A3_A1_A2" 2 425 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 426 "0x9ef01"
d G "A0_VR_A1_VR" 2 427 "0x3ff06"
d G "A3_VR_A2_VR" 2 428 "0xcff0e"
d G "CP1_INVERT" 2 429 "0x0000010"
d G "CP2_INVERT" 2 430 "0x0000020"
c L "setup_comparator" 2 1 2 "FUNCTION"
v L "mode" 2 437 "int8" `206 
f B "setup_vref" 2 437 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 439 "0xa0"
d G "VREF_HIGH" 2 440 "0x80"
d G "VREF_F5" 2 442 "0x40"
d G "VREF_COMP" 2 443 "0x10"
c L "setup_vref" 2 1 2 "FUNCTION"
v L "mode" 2 447 "int8" `208 
f B "setup_low_volt_detect" 2 447 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 449 "0x1F"
d G "LVD_45" 2 450 "0x1E"
d G "LVD_42" 2 451 "0x1D"
d G "LVD_40" 2 452 "0x1C"
d G "LVD_38" 2 453 "0x1B"
d G "LVD_36" 2 454 "0x1A"
d G "LVD_35" 2 455 "0x19"
d G "LVD_33" 2 456 "0x18"
d G "LVD_30" 2 457 "0x17"
d G "LVD_28" 2 458 "0x16"
d G "LVD_27" 2 459 "0x15"
d G "LVD_25" 2 460 "0x14"
d G "LVD_24" 2 461 "0x13"
d G "LVD_23" 2 462 "0x12"
d G "LVD_22" 2 463 "0x11"
d G "LVD_21" 2 464 "0x10"
d G "LVD_TRIGGER_BELOW" 2 466 "0"
d G "LVD_TRIGGER_ABOVE" 2 467 "0x80"
c L "setup_low_volt_detect" 2 1 2 "FUNCTION"
v L "mode" 2 472 "int8" `210 
f B "setup_oscillator" 2 472 "int8(int8 mode)" `209 
v L "mode" 2 473 "int8" `212 
v L "tune" 2 473 "sint8" `213 
f G "setup_oscillator" 2 473 "int8(int8 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 476 "0"
d G "OSC_125KHZ" 2 477 "0x10"
d G "OSC_250KHZ" 2 478 "0x20"
d G "OSC_500KHZ" 2 479 "0x30"
d G "OSC_1MHZ" 2 480 "0x40"
d G "OSC_2MHZ" 2 481 "0x50"
d G "OSC_4MHZ" 2 482 "0x60"
d G "OSC_8MHZ" 2 483 "0x70"
d G "OSC_16MHZ" 2 484 "0x4060"
d G "OSC_32MHZ" 2 485 "0x4070"
d G "OSC_TIMER1" 2 487 "1"
d G "OSC_INTRC" 2 488 "2"
d G "OSC_NORMAL" 2 489 "0"
d G "OSC_IDLE_MODE" 2 491 "0x80"
d G "OSC_31250" 2 492 "0x8000"
d G "OSC_PLL_ON" 2 493 "0x4000"
d G "OSC_PLL_OFF" 2 494 "0"
d G "OSC_STATE_STABLE" 2 498 "4"
d G "OSC_STATE_EXT_RUNNING" 2 499 "8"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 506 "int16" `215 
f B "setup_adc" 2 506 "void(int16 mode)" `214 
f B "read_adc" 2 507 "int8()" `216 
v L "mode" 2 508 "int8" `218 
f G "read_adc" 2 508 "int8(int8 mode)" `217 
f G "read_adc" 2 509 "int16()" `219 
v L "mode" 2 510 "int8" `221 
f G "read_adc" 2 510 "int16(int8 mode)" `220 
f B "adc_done" 2 511 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 513 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 514 "0x100"
d G "ADC_CLOCK_DIV_4" 2 515 "0x04"
d G "ADC_CLOCK_DIV_8" 2 516 "0x01"
d G "ADC_CLOCK_DIV_16" 2 517 "0x05"
d G "ADC_CLOCK_DIV_32" 2 518 "0x02"
d G "ADC_CLOCK_DIV_64" 2 519 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 520 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 522 "0x00"
d G "ADC_TAD_MUL_2" 2 523 "0x08"
d G "ADC_TAD_MUL_4" 2 524 "0x10"
d G "ADC_TAD_MUL_6" 2 525 "0x18"
d G "ADC_TAD_MUL_8" 2 526 "0x20"
d G "ADC_TAD_MUL_12" 2 527 "0x28"
d G "ADC_TAD_MUL_16" 2 528 "0x30"
d G "ADC_TAD_MUL_20" 2 529 "0x38"
c L "adc_done" 2 1 1 "FUNCTION"
v L "pins" 2 532 "int8" `224 
f B "setup_adc_ports" 2 532 "void(int8 pins)" `223 
v L "pins" 2 533 "int8" `226 
v L "reference" 2 533 "int8" `227 
f G "setup_adc_ports" 2 533 "void(int8 pins,int8 reference)" `225 
v L "channel" 2 534 "int8" `229 
f B "set_adc_channel" 2 534 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 537 "0x0F" "None"
d G "ALL_ANALOG" 2 538 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 539 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 540 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 541 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 542 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 543 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 544 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 545 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 546 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 547 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 548 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 549 "0x0D" "A0 A1"
d G "AN0" 2 550 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 551 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 552 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 553 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 554 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 555 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 556 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 557 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 558 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 559 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 560 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 561 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 562 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 565 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 566 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 567 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 568 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 571 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 572 "1"
d G "ADC_READ_ONLY" 2 573 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
v L "x" 2 579 "sint8" `231 
f B "abs" 2 579 "sint8(sint8 x)" `230 
v L "x" 2 580 "sint16" `233 
f G "abs" 2 580 "sint16(sint16 x)" `232 
v L "x" 2 581 "sint32" `235 
f G "abs" 2 581 "sint32(sint32 x)" `234 
v L "x" 2 582 "float" `237 
f G "abs" 2 582 "float(float x)" `236 
v L "??65535" 2 583 "int8" `239 
v L "??65535" 2 583 "int8" `240 
f B "_mul" 2 583 "int16(int8 ,int8 )" `238 
v L "??65535" 2 584 "sint8" `239 
v L "??65535" 2 584 "sint8" `243 
f G "_mul" 2 584 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 2 585 "int16" `239 
v L "??65535" 2 585 "int16" `246 
f G "_mul" 2 585 "int32(int16 ,int16 )" `244 
v L "??65535" 2 586 "sint16" `239 
v L "??65535" 2 586 "sint16" `249 
f G "_mul" 2 586 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 2 589 "int8" `251 
v L "offset" 2 589 "int8" `252 
f B "read_bank" 2 589 "int8(int8 bank,int8 offset)" `250 
v L "bank" 2 590 "int8" `254 
v L "offset" 2 590 "int8" `255 
v L "value" 2 590 "int8" `256 
f B "write_bank" 2 590 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 2 591 "*int8" `258 
v L "src" 2 591 "*int8" `259 
f B "strcpy" 2 591 "void(*int8 dest,*int8 src)" `257 
v L "dest" 2 592 "*int8" `261 
v L "src" 2 592 "*int8" `262 
f B "strcopy" 2 592 "void(*int8 dest,*int8 src)" `260 
v L "destination" 2 593 "*int8" `264 
v L "value" 2 593 "int8" `265 
v L "num" 2 593 "int16" `266 
f B "memset" 2 593 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 2 594 "*int8" `268 
v L "source" 2 594 "*int8" `269 
v L "num" 2 594 "int16" `270 
f B "memcpy" 2 594 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 2 597 "int8" `272 
f B "toupper" 2 597 "int8(int8 cvalue)" `271 
v L "cvalue" 2 598 "int8" `274 
f B "tolower" 2 598 "int8(int8 cvalue)" `273 
v L "string" 2 599 "*int8" `276 
v L "cstring" 2 599 "*int8" `277 
f B "sprintf" 2 599 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 2 602 "*int8" `280 
v L "bytes" 2 602 "int8" `281 
v L "value" 2 602 "int8" `282 
f B "shift_left" 2 602 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 2 603 "*int8" `284 
v L "bytes" 2 603 "int8" `285 
v L "value" 2 603 "int8" `286 
f B "shift_right" 2 603 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 2 604 "*int8" `288 
v L "bytes" 2 604 "int8" `289 
f B "rotate_left" 2 604 "void(*int8 address,int8 bytes)" `287 
v L "address" 2 605 "*int8" `291 
v L "bytes" 2 605 "int8" `292 
f B "rotate_right" 2 605 "void(*int8 address,int8 bytes)" `290 
v L "value" 2 606 "int8" `294 
f B "swap" 2 606 "void(int8 value)" `293 
v L "var" 2 607 "int16" `296 
v L "offset" 2 607 "int8" `297 
f B "make8" 2 607 "int8(int16 var,int8 offset)" `295 
v L "var" 2 608 "int32" `296 
v L "offset" 2 608 "int8" `300 
f G "make8" 2 608 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 2 609 "int8" `302 
v L "varlow" 2 609 "int8" `303 
f B "make16" 2 609 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 2 610 "int16" `305 
f B "make32" 2 610 "int32(int16 var1)" `304 
v L "var1" 2 611 "int16" `307 
v L "var2" 2 611 "int16" `308 
f G "make32" 2 611 "int32(int16 var1,int16 var2)" `306 
v L "var1" 2 612 "int16" `307 
v L "var2" 2 612 "int8" `311 
f G "make32" 2 612 "int32(int16 var1,int8 var2)" `309 
v L "var1" 2 613 "int16" `313 
v L "var2" 2 613 "int8" `314 
v L "var3" 2 613 "int8" `315 
f G "make32" 2 613 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 2 614 "int8" `317 
f G "make32" 2 614 "int32(int8 var1)" `316 
v L "var1" 2 615 "int8" `307 
v L "var2" 2 615 "int8" `320 
f G "make32" 2 615 "int32(int8 var1,int8 var2)" `318 
v L "var1" 2 616 "int8" `313 
v L "var2" 2 616 "int8" `314 
v L "var3" 2 616 "int8" `324 
f G "make32" 2 616 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 2 617 "int8" `326 
v L "var2" 2 617 "int8" `327 
v L "var3" 2 617 "int8" `328 
v L "var4" 2 617 "int8" `329 
f G "make32" 2 617 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 2 618 "int8" `307 
v L "var2" 2 618 "int16" `332 
f G "make32" 2 618 "int32(int8 var1,int16 var2)" `330 
v L "var1" 2 619 "int8" `313 
v L "var2" 2 619 "int16" `314 
v L "var3" 2 619 "int8" `336 
f G "make32" 2 619 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 2 620 "int8" `313 
v L "var2" 2 620 "int8" `314 
v L "var3" 2 620 "int16" `340 
f G "make32" 2 620 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 2 621 "int8" `342 
v L "bit" 2 621 "int8" `343 
f B "bit_set" 2 621 "void(int8 var,int8 bit)" `341 
v L "var" 2 622 "int16" `342 
v L "bit" 2 622 "int8" `346 
f G "bit_set" 2 622 "void(int16 var,int8 bit)" `344 
v L "var" 2 623 "int32" `342 
v L "bit" 2 623 "int8" `349 
f G "bit_set" 2 623 "void(int32 var,int8 bit)" `347 
v L "var" 2 624 "int8" `351 
v L "bit" 2 624 "int8" `352 
f B "bit_clear" 2 624 "void(int8 var,int8 bit)" `350 
v L "var" 2 625 "int16" `351 
v L "bit" 2 625 "int8" `355 
f G "bit_clear" 2 625 "void(int16 var,int8 bit)" `353 
v L "var" 2 626 "int32" `351 
v L "bit" 2 626 "int8" `358 
f G "bit_clear" 2 626 "void(int32 var,int8 bit)" `356 
v L "var" 2 627 "int8" `360 
v L "bit" 2 627 "int8" `361 
f B "bit_test" 2 627 "int8(int8 var,int8 bit)" `359 
v L "var" 2 628 "int16" `360 
v L "bit" 2 628 "int8" `364 
f G "bit_test" 2 628 "int8(int16 var,int8 bit)" `362 
v L "var" 2 629 "int32" `360 
v L "bit" 2 629 "int8" `367 
f G "bit_test" 2 629 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 2 632 "int8" `369 
f B "delay_cycles" 2 632 "void(int8 count)" `368 
v L "time" 2 633 "int16" `371 
f B "delay_ms" 2 633 "void(int16 time)" `370 
v L "time" 2 634 "int16" `373 
f B "delay_us" 2 634 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 2 637 "int8" `375 
f B "putchar" 2 637 "void(int8 cdata)" `374 
v L "cdata" 2 638 "int8" `377 
v L "stream" 2 638 "int8" `378 
f G "putchar" 2 638 "void(int8 cdata,int8 stream)" `376 
v L "string" 2 639 "*int8" `380 
f B "puts" 2 639 "void(*int8 string)" `379 
v L "string" 2 640 "*int8" `382 
v L "stream" 2 640 "int8" `383 
f G "puts" 2 640 "void(*int8 string,int8 stream)" `381 
f B "getch" 2 641 "int8()" `384 
v L "stream" 2 642 "int8" `386 
f G "getch" 2 642 "int8(int8 stream)" `385 
v L "string" 2 643 "*int8" `388 
f B "gets" 2 643 "void(*int8 string)" `387 
v L "string" 2 644 "*int8" `390 
v L "stream" 2 644 "int8" `391 
f G "gets" 2 644 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 2 645 "int8()" `392 
v L "stream" 2 646 "int8" `394 
f G "kbhit" 2 646 "int8(int8 stream)" `393 
v L "string" 2 647 "*int8" `396 
f B "printf" 2 647 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 2 648 "int8" `399 
v L "string" 2 648 "*int8" `400 
f B "fprintf" 2 648 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 2 649 "void()" `402 
v L "stream" 2 650 "int8" `404 
f B "fputc_send" 2 650 "void(int8 stream)" `403 
f B "rcv_buffer_full" 2 651 "int8()" `405 
v L "stream" 2 652 "int8" `407 
f G "rcv_buffer_full" 2 652 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 2 653 "int16()" `408 
v L "stream" 2 654 "int8" `410 
f G "rcv_buffer_bytes" 2 654 "int16(int8 stream)" `409 
f B "tx_buffer_full" 2 655 "int8()" `411 
v L "stream" 2 656 "int8" `413 
f G "tx_buffer_full" 2 656 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 2 657 "int16()" `414 
v L "stream" 2 658 "int8" `416 
f G "tx_buffer_bytes" 2 658 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 2 661 "int8()" `417 
v L "stream" 2 662 "int8" `419 
f G "i2c_read" 2 662 "int8(int8 stream)" `418 
v L "stream" 2 663 "int8" `421 
v L "ack" 2 663 "int8" `422 
f G "i2c_read" 2 663 "int8(int8 stream,int8 ack)" `420 
v L "data" 2 664 "int8" `424 
f B "i2c_write" 2 664 "int8(int8 data)" `423 
v L "stream" 2 665 "int8" `426 
v L "data" 2 665 "int8" `427 
f G "i2c_write" 2 665 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 2 666 "void()" `428 
v L "stream" 2 667 "int8" `430 
f G "i2c_start" 2 667 "void(int8 stream)" `429 
v L "stream" 2 668 "int8" `432 
v L "restart" 2 668 "int8" `433 
f G "i2c_start" 2 668 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 2 669 "void()" `434 
v L "stream" 2 670 "int8" `436 
f G "i2c_stop" 2 670 "void(int8 stream)" `435 
f B "i2c_isr_state" 2 671 "int8()" `437 
v L "addr" 2 672 "int8" `439 
f B "i2c_slaveaddr" 2 672 "void(int8 addr)" `438 
v L "stream" 2 673 "int8" `441 
v L "addr" 2 673 "int8" `442 
f G "i2c_slaveaddr" 2 673 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 2 674 "int8()" `443 
v L "stream" 2 675 "int8" `445 
f G "i2c_poll" 2 675 "int8(int8 stream)" `444 
v L "baud" 2 676 "int32" `447 
f B "i2c_init" 2 676 "void(int32 baud)" `446 
v L "stream" 2 677 "int8" `449 
v L "baud" 2 677 "int32" `450 
f G "i2c_init" 2 677 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 2 680 "int8()" `451 
f G "spi_xfer" 2 681 "int16()" `452 
f G "spi_xfer" 2 682 "int32()" `453 
v L "data" 2 683 "int8" `455 
f G "spi_xfer" 2 683 "int8(int8 data)" `454 
v L "data" 2 684 "int16" `457 
f G "spi_xfer" 2 684 "int16(int16 data)" `456 
v L "data" 2 685 "int32" `459 
f G "spi_xfer" 2 685 "int32(int32 data)" `458 
v L "stream" 2 686 "int8" `461 
v L "data" 2 686 "int8" `462 
f G "spi_xfer" 2 686 "int8(int8 stream,int8 data)" `460 
v L "stream" 2 687 "int8" `461 
v L "data" 2 687 "int16" `465 
f G "spi_xfer" 2 687 "int16(int8 stream,int16 data)" `463 
v L "stream" 2 688 "int8" `461 
v L "data" 2 688 "int32" `468 
f G "spi_xfer" 2 688 "int32(int8 stream,int32 data)" `466 
v L "stream" 2 689 "int8" `470 
v L "data" 2 689 "int8" `471 
v L "bits" 2 689 "int8" `472 
f G "spi_xfer" 2 689 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 2 690 "int8" `470 
v L "data" 2 690 "int16" `471 
v L "bits" 2 690 "int8" `476 
f G "spi_xfer" 2 690 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 2 691 "int8" `470 
v L "data" 2 691 "int32" `471 
v L "bits" 2 691 "int8" `480 
f G "spi_xfer" 2 691 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 2 692 "int32" `482 
f B "spi_init" 2 692 "void(int32 baud)" `481 
v L "stream" 2 693 "int8" `484 
v L "baud" 2 693 "int32" `485 
f G "spi_init" 2 693 "void(int8 stream,int32 baud)" `483 
v L "baud" 2 694 "int32" `487 
f B "spi_speed" 2 694 "void(int32 baud)" `486 
v L "stream" 2 695 "int8" `489 
v L "baud" 2 695 "int32" `490 
f G "spi_speed" 2 695 "void(int8 stream,int32 baud)" `488 
v L "stream" 2 696 "int8" `492 
v L "baud" 2 696 "int32" `493 
v L "clock" 2 696 "int32" `494 
f G "spi_speed" 2 696 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 2 697 "int8" `496 
f B "spi_prewrite" 2 697 "void(int8 data)" `495 
v L "data" 2 698 "int16" `498 
f G "spi_prewrite" 2 698 "void(int16 data)" `497 
v L "data" 2 699 "int32" `500 
f G "spi_prewrite" 2 699 "void(int32 data)" `499 
v L "??65535" 2 700 "int8" `502 
v L "data" 2 700 "int8" `503 
f G "spi_prewrite" 2 700 "void(int8 ,int8 data)" `501 
v L "??65535" 2 701 "int8" `502 
v L "data" 2 701 "int16" `506 
f G "spi_prewrite" 2 701 "void(int8 ,int16 data)" `504 
v L "??65535" 2 702 "int8" `502 
v L "data" 2 702 "int32" `509 
f G "spi_prewrite" 2 702 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 2 703 "int8()" `510 
f G "spi_xfer_in" 2 704 "int16()" `511 
f G "spi_xfer_in" 2 705 "int32()" `512 
v L "bits" 2 706 "int8" `514 
f G "spi_xfer_in" 2 706 "int8(int8 bits)" `513 
v L "bits" 2 707 "int8" `516 
f G "spi_xfer_in" 2 707 "int16(int8 bits)" `515 
v L "bits" 2 708 "int8" `518 
f G "spi_xfer_in" 2 708 "int32(int8 bits)" `517 
v L "stream" 2 709 "int8" `520 
v L "bits" 2 709 "int8" `521 
f G "spi_xfer_in" 2 709 "int8(int8 stream,int8 bits)" `519 
v L "stream" 2 710 "int8" `520 
v L "bits" 2 710 "int8" `524 
f G "spi_xfer_in" 2 710 "int16(int8 stream,int8 bits)" `522 
v L "stream" 2 711 "int8" `520 
v L "bits" 2 711 "int8" `527 
f G "spi_xfer_in" 2 711 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 2 714 "void()" `528 
f B "rtos_yield" 2 715 "void()" `529 
v L "task" 2 716 "int8" `531 
f B "rtos_enable" 2 716 "void(int8 task)" `530 
v L "task" 2 717 "int8" `533 
f B "rtos_disable" 2 717 "void(int8 task)" `532 
f B "rtos_terminate" 2 718 "void()" `534 
v L "flag" 2 719 "int8" `536 
f B "rtos_await" 2 719 "void(int8 flag)" `535 
v L "sem" 2 720 "int8" `538 
f B "rtos_wait" 2 720 "void(int8 sem)" `537 
v L "sem" 2 721 "int8" `540 
f B "rtos_signal" 2 721 "void(int8 sem)" `539 
v L "task" 2 722 "int8" `542 
v L "msg" 2 722 "int8" `543 
f B "rtos_msg_send" 2 722 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 2 723 "int8()" `544 
f B "rtos_msg_poll" 2 724 "int8()" `545 
v L "task" 2 725 "int8" `547 
f B "rtos_overrun" 2 725 "int8(int8 task)" `546 
v L "task" 2 726 "int8" `549 
v L "stat" 2 726 "*int8" `550 
f B "rtos_stats" 2 726 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 2 729 "int8()" `551 
f G "get_ticks" 2 730 "int16()" `552 
f G "get_ticks" 2 731 "int32()" `553 
v L "stream" 2 732 "int8" `555 
f G "get_ticks" 2 732 "int8(int8 stream)" `554 
v L "stream" 2 733 "int8" `557 
f G "get_ticks" 2 733 "int16(int8 stream)" `556 
v L "stream" 2 734 "int8" `559 
f G "get_ticks" 2 734 "int32(int8 stream)" `558 
v L "value" 2 735 "int8" `561 
f B "set_ticks" 2 735 "void(int8 value)" `560 
v L "value" 2 736 "int16" `563 
f G "set_ticks" 2 736 "void(int16 value)" `562 
v L "value" 2 737 "int32" `565 
f G "set_ticks" 2 737 "void(int32 value)" `564 
v L "stream" 2 738 "int8" `567 
v L "value" 2 738 "int8" `568 
f G "set_ticks" 2 738 "void(int8 stream,int8 value)" `566 
v L "stream" 2 739 "int8" `567 
v L "value" 2 739 "int16" `571 
f G "set_ticks" 2 739 "void(int8 stream,int16 value)" `569 
v L "stream" 2 740 "int8" `567 
v L "value" 2 740 "int32" `574 
f G "set_ticks" 2 740 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 2 743 "void()" `575 
v L "stream" 2 744 "int8" `577 
f G "pwm_on" 2 744 "void(int8 stream)" `576 
f B "pwm_off" 2 745 "void()" `578 
v L "stream" 2 746 "int8" `580 
f G "pwm_off" 2 746 "void(int8 stream)" `579 
v L "duty" 2 747 "int16" `582 
f B "pwm_set_duty" 2 747 "void(int16 duty)" `581 
v L "stream" 2 748 "int8" `584 
v L "duty" 2 748 "int16" `585 
f G "pwm_set_duty" 2 748 "void(int8 stream,int16 duty)" `583 
v L "percent" 2 749 "int16" `587 
f B "pwm_set_duty_percent" 2 749 "void(int16 percent)" `586 
v L "stream" 2 750 "int8" `589 
v L "percent" 2 750 "int16" `590 
f G "pwm_set_duty_percent" 2 750 "void(int8 stream,int16 percent)" `588 
v L "frequency" 2 751 "int32" `592 
f B "pwm_set_frequency" 2 751 "void(int32 frequency)" `591 
v L "stream" 2 752 "int8" `594 
v L "frequency" 2 752 "int32" `595 
f G "pwm_set_frequency" 2 752 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 2 755 "int16()" `596 
v L "stream" 2 756 "int8" `598 
f G "get_capture_time" 2 756 "int16(int8 stream)" `597 
f B "get_capture_event" 2 757 "int8()" `599 
v L "stream" 2 758 "int8" `601 
f G "get_capture_event" 2 758 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 771 "int32" `603 
f B "goto_address" 2 771 "void(int32 address)" `602 
v L "label" 2 772 "int32" `605 
f B "label_address" 2 772 "int32(int32 label)" `604  "Program Memory Prototypes:"
v L "address" 2 775 "int32" `607 
v L "dataptr" 2 775 "*int8" `608 
v L "count" 2 775 "int16" `609 
f B "read_program_memory" 2 775 "void(int32 address,*int8 dataptr,int16 count)" `606 
v L "address" 2 776 "int32" `611 
f B "read_program_eeprom" 2 776 "int16(int32 address)" `610 
v L "address" 2 777 "int32" `613 
f B "erase_program_eeprom" 2 777 "void(int32 address)" `612 
v L "address" 2 778 "int32" `615 
v L "dataptr" 2 778 "*int8" `616 
v L "count" 2 778 "int16" `617 
f B "write_program_memory" 2 778 "void(int32 address,*int8 dataptr,int16 count)" `614 
v L "address" 2 779 "int32" `619 
v L "data" 2 779 "int16" `620 
f B "write_program_eeprom" 2 779 "void(int32 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 784 "int16" `621 
v L "address" 2 789 "__EEADDRESS__" `623 
f B "read_eeprom" 2 789 "int8(__EEADDRESS__ address)" `622 
v L "address" 2 790 "__EEADDRESS__" `625 
v L "value" 2 790 "int8" `626 
f B "write_eeprom" 2 790 "void(__EEADDRESS__ address,int8 value)" `624  "INT"
c L "write_eeprom" 2 1 4 "FUNCTION"
v L "interrupt" 2 797 "int32" `628 
f B "enable_interrupts" 2 797 "void(int32 interrupt)" `627 
v L "interrupt" 2 798 "int32" `630 
f B "disable_interrupts" 2 798 "void(int32 interrupt)" `629 
v L "interrupt" 2 799 "int32" `632 
f B "clear_interrupt" 2 799 "void(int32 interrupt)" `631 
v L "interrupt" 2 800 "int32" `634 
f B "interrupt_active" 2 800 "int8(int32 interrupt)" `633 
v L "interrupt" 2 801 "int32" `636 
f B "interrupt_enabled" 2 801 "int8(int32 interrupt)" `635 
v L "source" 2 802 "int8" `638 
v L "edge" 2 802 "int8" `639 
f B "ext_int_edge" 2 802 "void(int8 source,int8 edge)" `637 
v L "address" 2 803 "int16" `641 
f B "jump_to_irs" 2 803 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 805 "0x40"
d G "H_TO_L" 2 806 "0"
d G "GLOBAL" 2 808 "0xF2C0"
d G "PERIPH" 2 809 "0xF240"
d G "INT_RTCC" 2 810 "0x00F220"
d G "INT_TIMER0" 2 811 "0x00F220"
d G "INT_TIMER1" 2 812 "0x009D01"
d G "INT_TIMER2" 2 813 "0x009D02"
d G "INT_TIMER3" 2 814 "0x00A002"
d G "INT_EXT_L2H" 2 815 "0x5000F210"
d G "INT_EXT_H2L" 2 816 "0x6000F210"
d G "INT_EXT" 2 817 "0x00F210"
d G "INT_EXT1_L2H" 2 818 "0x5001F008"
d G "INT_EXT1_H2L" 2 819 "0x6001F008"
d G "INT_EXT1" 2 820 "0x00F008"
d G "INT_EXT2_L2H" 2 821 "0x5002F010"
d G "INT_EXT2_H2L" 2 822 "0x6002F010"
d G "INT_EXT2" 2 823 "0x00F010"
d G "INT_RB" 2 824 "0x00FFF208"
d G "INT_PSP" 2 825 "0x009D80"
d G "INT_AD" 2 826 "0x009D40"
d G "INT_RDA" 2 827 "0x009D20"
d G "INT_TBE" 2 828 "0x009D10"
d G "INT_SSP" 2 829 "0x009D08"
d G "INT_CCP1" 2 830 "0x009D04"
d G "INT_CCP2" 2 831 "0x00A001"
d G "INT_BUSCOL" 2 832 "0x00A008"
d G "INT_LOWVOLT" 2 833 "0x00A004"
d G "INT_COMP" 2 834 "0x00A040"
d G "INT_EEPROM" 2 835 "0x00A010"
d G "INT_OSCF" 2 836 "0x00A080"
D G "PIN_OUT_1" 1 17 "PIN_E2"
D G "PIN_OUT_2" 1 18 "PIN_E1"
D G "PIN_OUT_3" 1 19 "PIN_E0"
D G "PIN_OUT_4" 1 20 "PIN_A4"
D G "PIN_OUT_5" 1 21 "PIN_A0"
D G "PIN_OUT_6" 1 22 "PIN_A1"
D G "PIN_OUT_7" 1 23 "PIN_A2"
D G "PIN_OUT_8" 1 24 "PIN_A3"
D G "KEY_NEXT" 1 26 "PIN_B4"
D G "KEY_OK" 1 27 "PIN_B5"
V G "PIN_OUT" 1 29 "[8]" `653 
D G "LCD_LIGHT_PIN" 1 41 "PIN_D3"
D G "LCD_RS_PIN" 1 42 "PIN_D2"
D G "LCD_RW_PIN" 1 43 "PIN_D1"
D G "LCD_ENABLE_PIN" 1 44 "PIN_D0"
D G "LCD_DATA4" 1 45 "PIN_D4"
D G "LCD_DATA5" 1 46 "PIN_D5"
D G "LCD_DATA6" 1 47 "PIN_D6"
D G "LCD_DATA7" 1 48 "PIN_D7"
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 3 19 10 "FUNCTION"
V L "s1" 3 34 "*int8" `657 
V L "s2" 3 34 "*int8" `658 
V L "n" 3 34 "int16" `659 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `656 
V L "sc1" 3 36 "*int8" `660 
V L "sc2" 3 37 "*int8" `661 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
V L "s1" 3 61 "*int8" `663 
V L "s2" 3 61 "*int8" `664 
V L "n" 3 61 "int16" `665 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `662 
V L "s" 3 63 "*int8" `666 
C L "strcat" 3 19 3 "FUNCTION"
V L "s1" 3 78 "*int8" `668 
V L "s2" 3 78 "*int8" `669 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `667 
V L "s" 3 80 "*int8" `670 
C L "strncat" 3 19 2 "FUNCTION"
V L "s1" 3 96 "*int8" `672 
V L "s2" 3 96 "*int8" `673 
V L "n" 3 96 "int16" `674 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `671 
V L "s" 3 98 "*int8" `675 
C L "memcmp" 3 19 3 "FUNCTION"
V L "s1" 3 120 "*int8" `677 
V L "s2" 3 120 "*int8" `678 
V L "n" 3 120 "int16" `679 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `676 
V L "su1" 3 122 "*int8" `680 
V L "su2" 3 122 "*int8" `681 
C L "strcmp" 3 19 2 "FUNCTION"
V L "s1" 3 134 "*int8" `683 
V L "s2" 3 134 "*int8" `684 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `682 
C L "strcoll" 3 19 2 "FUNCTION"
V L "s1" 3 144 "*int8" `686 
V L "s2" 3 144 "*int8" `687 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `685 
C L "strncmp" 3 19 4 "FUNCTION"
V L "s1" 3 157 "*int8" `689 
V L "s2" 3 157 "*int8" `690 
V L "n" 3 157 "int16" `691 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `688 
C L "strxfrm" 3 19 3 "FUNCTION"
V L "s1" 3 169 "*int8" `693 
V L "s2" 3 169 "*int8" `694 
V L "n" 3 169 "int16" `695 
F G "strxfrm" 3 170 "int16(*int8 s1,*int8 s2,int16 n)" `692 
V L "s" 3 171 "*int8" `696 
V L "n1" 3 172 "int8" `697 
C L "memchr" 3 19 3 "FUNCTION"
V L "s" 3 191 "*int8" `699 
V L "c" 3 191 "int8" `700 
V L "n" 3 191 "int16" `701 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int16 n)" `698 
V L "uc" 3 193 "int8" `702 
V L "su" 3 194 "*int8" `703 
C L "strchr" 3 19 2 "FUNCTION"
V L "s" 3 205 "*int8" `705 
V L "c" 3 205 "int8" `706 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `704 
C L "strcspn" 3 19 4 "FUNCTION"
V L "s1" 3 217 "*int8" `708 
V L "s2" 3 217 "*int8" `709 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `707 
V L "sc1" 3 219 "*int8" `710 
V L "sc2" 3 219 "*int8" `711 
C L "strpbrk" 3 19 4 "FUNCTION"
V L "s1" 3 232 "*int8" `713 
V L "s2" 3 232 "*int8" `714 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `712 
V L "sc1" 3 234 "*int8" `715 
V L "sc2" 3 234 "*int8" `716 
C L "strrchr" 3 19 2 "FUNCTION"
V L "s" 3 247 "*int8" `718 
V L "c" 3 247 "int8" `719 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `717 
V L "p" 3 249 "*int8" `720 
C L "strspn" 3 19 2 "FUNCTION"
V L "s1" 3 262 "*int8" `722 
V L "s2" 3 262 "*int8" `723 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `721 
V L "sc1" 3 264 "*int8" `724 
V L "sc2" 3 264 "*int8" `725 
C L "strstr" 3 19 6 "FUNCTION"
V L "s1" 3 281 "*int8" `727 
V L "s2" 3 281 "*int8" `728 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `726 
V L "s" 3 283 "*int8" `729 
V L "t" 3 283 "*int8" `730 
C L "strtok" 3 19 13 "FUNCTION"
V L "s1" 3 320 "*int8" `732 
V L "s2" 3 320 "*int8" `733 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `731 
V L "beg" 3 322 "*int8" `734 
V L "end" 3 322 "*int8" `735 
V L "save" 3 323 "*int8" `736 
C L "strlen" 3 19 6 "FUNCTION"
V L "s" 3 369 "*int8" `738 
F G "strlen" 3 370 "int8(*int8 s)" `737 
V L "sc" 3 371 "*int8" `739 
C L "stricmp" 3 19 2 "FUNCTION"
V L "s1" 3 380 "*int8" `741 
V L "s2" 3 380 "*int8" `742 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `740 
C L "strlwr" 3 19 3 "FUNCTION"
V L "s" 3 394 "*int8" `746 
F G "strlwr" 3 395 "*int8(*int8 s)" `745 
V L "p" 3 396 "*int8" `747 
C L "strupr" 3 19 3 "FUNCTION"
V L "s" 3 408 "*int8" `749 
F G "strupr" 3 409 "*int8(*int8 s)" `748 
V L "p" 3 410 "*int8" `750 
D G "_STDLIB" 6 12 ""
D G "RAND_MAX" 6 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 25 "1"
T G "div_t" 6 33 "{sint8 quot,sint8 rem}" `754 
T G "ldiv_t" 6 38 "{sint16 quot,sint16 rem}" `758  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 43 2 "FUNCTION"
C L "atoi" 6 46 1 "*"
C L "atoi" 6 46 1 "*"
V L "s" 6 50 "*int8" `760 
f G "atoi" 6 50 "sint8(*int8 s)" `759  "Syntax: signed int32  atoi32(char * s)"
V L "s" 6 58 "*int8" `762 
f G "atoi32" 6 58 "sint32(*int8 s)" `761  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 46 2 "FUNCTION"
V L "num" 6 79 "sint32" `764 
V L "base" 6 79 "int8" `765 
V L "s" 6 79 "*int8" `766 
f G "itoa" 6 79 "*int8(sint32 num,int8 base,*int8 s)" `763  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 81 1 "*"
C L "itoa" 6 81 1 "*"
V L "s" 6 85 "*int8" `768 
f G "atol" 6 85 "sint16(*int8 s)" `767  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
V L "s" 6 93 "*int8" `770 
V L "endptr" 6 93 "*int8" `771 
V L "base" 6 93 "sint8" `772 
f G "strtol" 6 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `769  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
V L "s" 6 101 "*int8" `774 
V L "endptr" 6 101 "*int8" `775 
V L "base" 6 101 "sint8" `776 
f G "strtoul" 6 101 "int16(*int8 s,*int8 endptr,sint8 base)" `773  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 95 2 "FUNCTION"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
V L "s" 6 110 "*int8" `778 
V L "endptr" 6 110 "*int8" `779 
f G "strtof" 6 110 "float(*int8 s,*int8 endptr)" `777  "provided for compatibility"
D G "strtof48" 6 116 "(s, e) strtof(s, e)"
D G "strtod" 6 117 "(s, e) strtof(s, e)"
C L "strtof" 6 103 1 "FUNCTION"
C L "strtof" 6 120 1 "*"
D G "atof" 6 124 "(s)   strtof(s, 0)"
C L "strtof" 6 120 1 "FUNCTION"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
V L "s" 6 149 "*int8" `781 
f G "atoe" 6 149 "float(*int8 s)" `780  "Pseudo-random sequence generation functions"
C L "atoe" 6 143 1 "FUNCTION"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
f G "rand" 6 169 "int16()" `782  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
V L "seed" 6 191 "int32" `784 
f G "srand" 6 191 "void(int32 seed)" `783  "Memory management functions"
C L "srand" 6 171 3 "FUNCTION"
V L "string" 6 205 "*int8" `786 
f G "system" 6 205 "sint8(*int8 string)" `785  "Searching and sorting utilities"
C L "system" 6 171 1 "FUNCTION"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 4 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
D G "labs" 6 249 "abs"
V L "numer" 6 251 "sint8" `788 
V L "denom" 6 251 "sint8" `789 
f G "div" 6 251 "div_t(sint8 numer,sint8 denom)" `787 
V L "numer" 6 252 "sint16" `791 
V L "denom" 6 252 "sint16" `792 
f G "ldiv" 6 252 "ldiv_t(sint16 numer,sint16 denom)" `790  "Multibyte character functions"
C L "ldiv" 6 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
V L "numer" 6 274 "sint8" `788 
V L "denom" 6 274 "sint8" `795 
F G "div" 6 275 "div_t(sint8 numer,sint8 denom)" `787 
V L "val" 6 276 "div_t" `793 
V L "numer" 6 282 "sint16" `791 
V L "denom" 6 282 "sint16" `802 
F G "ldiv" 6 283 "ldiv_t(sint16 numer,sint16 denom)" `790 
V L "val" 6 284 "ldiv_t" `800 
V L "s" 6 361 "*int8" `808 
F G "atoe" 6 362 "float(*int8 s)" `780 
V L "pow10" 6 363 "float" `807 
V L "result" 6 364 "float" `808 
V L "sign" 6 365 "int8" `809 
V L "expsign" 6 366 "int8" `810 
V L "c" 6 367 "int8" `811 
V L "ptr" 6 368 "int8" `812 
V L "i" 6 369 "int8" `813 
V L "exp" 6 370 "float" `814 
V L "expcnt" 6 371 "int8" `815 
C L "atoe" 6 397 1 "FUNCTION"
V L "s" 6 429 "*int8" `828 
F G "atoi" 6 430 "sint8(*int8 s)" `759 
V L "result" 6 431 "sint8" `827 
V L "sign" 6 432 "int8" `828 
V L "base" 6 432 "int8" `829 
V L "index" 6 432 "int8" `830 
V L "c" 6 433 "int8" `831 
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
V L "s" 6 498 "*int8" `833 
F G "atol" 6 499 "sint16(*int8 s)" `767 
V L "result" 6 500 "sint16" `832 
V L "sign" 6 501 "int8" `833 
V L "base" 6 501 "int8" `834 
V L "index" 6 501 "int8" `835 
V L "c" 6 502 "int8" `836 
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "mult_with10" 6 397 1 "FUNCTION"
V L "num" 6 565 "int32" `838 
F G "mult_with10" 6 566 "sint32(int32 num)" `837 
V L "s" 6 571 "*int8" `840 
F G "atoi32" 6 572 "sint32(*int8 s)" `761 
V L "result" 6 573 "sint32" `839 
V L "sign" 6 574 "int8" `840 
V L "base" 6 574 "int8" `841 
V L "index" 6 574 "int8" `842 
V L "c" 6 575 "int8" `843 
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
V L "num" 6 770 "sint32" `764 
V L "base" 6 770 "int8" `765 
V L "s" 6 770 "*int8" `847 
F G "itoa" 6 771 "*int8(sint32 num,int8 base,*int8 s)" `763 
V L "temp" 6 772 "int32" `844 
V L "i" 6 773 "int8" `845 
V L "sign" 6 773 "int8" `846 
V L "cnt" 6 773 "int8" `847 
V L "c" 6 774 "int8" `848 
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
V L "s" 6 885 "*int8" `778 
V L "endptr" 6 885 "*int8" `857 
F G "strtof" 6 886 "float(*int8 s,*int8 endptr)" `777 
V L "pow10" 6 887 "float" `855 
V L "result" 6 888 "float" `856 
V L "skip" 6 889 "int1" `857 
V L "sign" 6 889 "int1" `858 
V L "point" 6 889 "int1" `859 
V L "c" 6 890 "int8" `860 
V L "ptr" 6 891 "int8" `861 
V L "s" 6 1103 "*int8" `774 
V L "endptr" 6 1103 "*int8" `775 
V L "base" 6 1103 "sint8" `866 
F G "strtoul" 6 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `773 
V L "sc" 6 1105 "*int8" `863 
V L "s1" 6 1105 "*int8" `864 
V L "sd" 6 1105 "*int8" `865 
V L "x" 6 1106 "int16" `866 
V L "sign" 6 1107 "int8" `867 
V L "digits" 6 1108 "int8[1]" `868 
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
V L "s" 6 1165 "*int8" `770 
V L "endptr" 6 1165 "*int8" `771 
V L "base" 6 1165 "sint8" `873 
F G "strtol" 6 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `769 
V L "sc" 6 1167 "*int8" `870 
V L "s1" 6 1167 "*int8" `871 
V L "sd" 6 1167 "*int8" `872 
V L "x" 6 1168 "sint16" `873 
V L "sign" 6 1169 "int8" `874 
V L "digits" 6 1170 "int8[1]" `875 
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
V L "string" 6 1228 "*int8" `878 
F G "system" 6 1229 "sint8(*int8 string)" `785 
V L "s" 6 1233 "*int8" `878 
V L "n" 6 1233 "int16" `879 
F G "mblen" 6 1234 "int8(*int8 s,int16 n)" `877 
V L "pwc" 6 1238 "*int8" `881 
V L "s" 6 1238 "*int8" `882 
V L "n" 6 1238 "int16" `883 
F G "mbtowc" 6 1239 "int8(*int8 pwc,*int8 s,int16 n)" `880 
V L "s" 6 1244 "*int8" `885 
V L "wchar" 6 1244 "int8" `886 
F G "wctomb" 6 1245 "int8(*int8 s,int8 wchar)" `884 
V L "pwcs" 6 1250 "*int8" `888 
V L "s" 6 1250 "*int8" `889 
V L "n" 6 1250 "int16" `890 
F G "mbstowcs" 6 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `887 
V L "s" 6 1256 "*int8" `892 
V L "pwcs" 6 1256 "*int8" `893 
V L "n" 6 1256 "int16" `894 
F G "wcstombs" 6 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `891 
V G "_Randseed" 6 1266 "int32" `895 
F G "rand" 6 1269 "int16()" `782 
V L "seed" 6 1274 "int32" `900 
F G "srand" 6 1275 "void(int32 seed)" `783 
V L "p1" 6 1284 "*int8" `900 
V L "p2" 6 1284 "*int8" `901 
T G "*_Cmpfun" 6 1284 "sint8(*int8 p1,*int8 p2)" `899 
V L "qdata" 6 1291 "*int8" `904 
V L "qitems" 6 1291 "int8" `905 
V L "qsize" 6 1291 "int8" `906 
V L "cmp" 6 1291 "_Cmpfun" `907 
F G "qsort" 6 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `903 
V L "m" 6 1292 "int8" `908 
V L "j" 6 1292 "int8" `909 
V L "i" 6 1292 "int8" `910 
V L "l" 6 1292 "int8" `911 
V L "done" 6 1293 "int1" `912 
V L "t" 6 1294 "int8[16]" `913 
V L "key" 6 1319 "*int8" `916 
V L "base" 6 1319 "*int8" `917 
V L "num" 6 1319 "int16" `918 
V L "width" 6 1319 "int16" `919 
V L "cmp" 6 1319 "_Cmpfun" `920 
F G "bsearch" 6 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `915 
V L "p" 6 1321 "*int8" `921 
V L "q" 6 1321 "*int8" `922 
V L "n" 6 1322 "int16" `923 
V L "pivot" 6 1323 "int16" `924 
V L "val" 6 1324 "sint8" `925 
C L "bsearch" 6 397 1 "FUNCTION"
D G "MATH_H" 7 30 ""
D G "PI" 7 35 "3.1415926535897932"
D G "SQRT2" 7 38 "1.4142135623730950"
C L "CEIL_FLOOR" 7 2 3 "FUNCTION"
V L "x" 7 45 "float" `930 
V L "n" 7 45 "int8" `931 
F G "CEIL_FLOOR" 7 46 "float(float x,int8 n)" `929 
V L "y" 7 47 "float" `932 
V L "res" 7 47 "float" `933 
V L "l" 7 48 "int16" `934 
V L "s" 7 49 "int1" `935 
C L "floor" 7 2 5 "FUNCTION"
V L "x" 7 207 "float" `942 
F G "floor" 7 208 "float(float x)" `941 
C L "ceil" 7 2 5 "FUNCTION"
V L "x" 7 233 "float" `944 
F G "ceil" 7 234 "float(float x)" `943 
D G "fabs" 7 259 "abs"
C L "fmod" 7 2 6 "FUNCTION"
V L "x" 7 271 "float" `946 
V L "y" 7 271 "float" `947 
F G "fmod" 7 272 "float(float x,float y)" `945 
V L "i" 7 273 "float" `948 
D G "LN2" 7 334 "0.6931471805599453"
D G "LN2_INV" 7 335 "1.4426950408889634073"
V G "pe" 7 337 "[6]" `949 
V L "x" 7 341 "float" `953 
F G "exp" 7 342 "float(float x)" `952 
V L "y" 7 343 "float" `954 
V L "res" 7 343 "float" `955 
V L "r" 7 343 "float" `956 
V L "n" 7 347 "sint8" `957 
V L "s" 7 348 "int1" `958 
C L "exp" 7 2 1 "FUNCTION"
V G "pl" 7 525 "[4]" `961 
V G "ql" 7 526 "[4]" `964 
C L "log" 7 2 3 "FUNCTION"
V L "x" 7 534 "float" `968 
F G "log" 7 535 "float(float x)" `967 
V L "y" 7 536 "float" `969 
V L "res" 7 536 "float" `970 
V L "r" 7 536 "float" `971 
V L "y2" 7 536 "float" `972 
V L "n" 7 540 "sint8" `973 
C L "log" 7 2 1 "FUNCTION"
D G "LN10" 7 758 "2.3025850929940456"
D G "LN10_INV" 7 759 "0.4342944819032518276"
C L "log10" 7 2 3 "FUNCTION"
V L "x" 7 767 "float" `975 
F G "log10" 7 768 "float(float x)" `974 
V L "r" 7 769 "float" `976 
C L "modf" 7 2 8 "FUNCTION"
V L "value" 7 808 "float" `978 
V L "iptr" 7 808 "*float" `979 
F G "modf" 7 809 "float(float value,*float iptr)" `977 
C L "pwr" 7 2 6 "FUNCTION"
V L "x" 7 836 "float" `981 
V L "y" 7 836 "float" `982 
F G "pwr" 7 837 "float(float x,float y)" `980 
C L "pow" 7 2 7 "FUNCTION"
V L "x" 7 899 "float" `984 
V L "y" 7 899 "float" `985 
F G "pow" 7 900 "float(float x,float y)" `983 
C L "sqrt" 7 2 5 "FUNCTION"
V L "x" 7 960 "float" `987 
F G "sqrt" 7 961 "float(float x)" `986 
V L "y" 7 962 "float" `988 
V L "res" 7 962 "float" `989 
V L "p" 7 966 "*int8" `990 
D G "PI_DIV_BY_TWO_INV" 7 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 7 1159 "1.5707963267948966"
D G "TWOBYPI" 7 1163 "0.6366197723675813"
C L "cos" 7 2 3 "FUNCTION"
V L "x" 7 1171 "float" `992 
F G "cos" 7 1172 "float(float x)" `991 
V L "y" 7 1173 "float" `993 
V L "t" 7 1173 "float" `994 
V L "t2" 7 1173 "float" `995 
V L "quad" 7 1174 "int8" `996 
V L "i" 7 1174 "int8" `997 
V L "frac" 7 1175 "float" `998 
V L "p" 7 1176 "float[5]" `999  "by the series definition for cosine"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 2 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "sin" 7 2 5 "FUNCTION"
V L "x" 7 1312 "float" `1001 
F G "sin" 7 1313 "float(float x)" `1000 
C L "tan" 7 2 5 "FUNCTION"
V L "x" 7 1338 "float" `1003 
F G "tan" 7 1339 "float(float x)" `1002 
V L "c" 7 1340 "float" `1004 
V L "s" 7 1340 "float" `1005 
V G "pas" 7 1378 "[3]" `1006 
V G "qas" 7 1379 "[3]" `1009 
V L "x" 7 1381 "float" `1013 
V L "n" 7 1381 "int8" `1014 
F G "ASIN_COS" 7 1382 "float(float x,int8 n)" `1012 
V L "y" 7 1383 "float" `1015 
V L "res" 7 1383 "float" `1016 
V L "r" 7 1383 "float" `1017 
V L "y2" 7 1383 "float" `1018 
V L "s" 7 1384 "int1" `1019 
C L "ASIN_COS" 7 2 1 "FUNCTION"
C L "ASIN_COS" 7 2 1 "FUNCTION"
C L "asin" 7 2 5 "FUNCTION"
V L "x" 7 1539 "float" `1021 
F G "asin" 7 1540 "float(float x)" `1020 
V L "r" 7 1541 "float" `1022 
C L "acos" 7 2 5 "FUNCTION"
V L "x" 7 1573 "float" `1024 
F G "acos" 7 1574 "float(float x)" `1023 
V L "r" 7 1575 "float" `1025 
V G "pat" 7 1601 "[4]" `1026 
V G "qat" 7 1602 "[4]" `1029 
C L "atan" 7 2 3 "FUNCTION"
V L "x" 7 1610 "float" `1033 
F G "atan" 7 1611 "float(float x)" `1032 
V L "y" 7 1612 "float" `1034 
V L "res" 7 1612 "float" `1035 
V L "r" 7 1612 "float" `1036 
V L "s" 7 1613 "int1" `1037 
V L "flag" 7 1613 "int1" `1038 
C L "atan" 7 2 1 "FUNCTION"
C L "atan2" 7 2 7 "FUNCTION"
V L "y" 7 1753 "float" `1040 
V L "x" 7 1753 "float" `1041 
F G "atan2" 7 1754 "float(float y,float x)" `1039 
V L "z" 7 1755 "float" `1042 
V L "sign" 7 1756 "int1" `1043 
V L "quad" 7 1757 "int8" `1044 
C L "atan2" 7 2 1 "FUNCTION"
C L "atan2" 7 2 1 "FUNCTION"
C L "cosh" 7 2 7 "FUNCTION"
V L "x" 7 1975 "float" `1047 
F G "cosh" 7 1976 "float(float x)" `1046 
C L "sinh" 7 2 6 "FUNCTION"
V L "x" 7 2002 "float" `1049 
F G "sinh" 7 2003 "float(float x)" `1048 
C L "tanh" 7 2 6 "FUNCTION"
V L "x" 7 2032 "float" `1051 
F G "tanh" 7 2033 "float(float x)" `1050 
D G "LOG2" 7 2062 ".30102999566398119521"
D G "LOG2_INV" 7 2063 "3.32192809488736234787"
V L "x" 7 2064 "float" `1053 
V L "exp" 7 2064 "*sint8" `1054 
F G "frexp" 7 2065 "float(float x,*sint8 exp)" `1052 
V L "res" 7 2066 "float" `1055 
V L "sign" 7 2067 "int1" `1056 
C L "ldexp" 7 2 6 "FUNCTION"
V L "value" 7 2209 "float" `1058 
V L "exp" 7 2209 "sint8" `1059 
F G "ldexp" 7 2210 "float(float value,sint8 exp)" `1057 
D G "__LCD_C__" 8 76 ""
T G "LCD_PIN_MAP" 8 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `1066  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 8 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 8 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 8 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 8 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 8 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 8 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 8 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 8 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 8 187 "20"
f G "lcd_read_nibble" 8 190 "int8()" `1067 
F G "lcd_read_byte" 8 193 "int8()" `1068 
V L "low" 8 194 "int8" `1069 
V L "high" 8 194 "int8" `1070 
F G "lcd_read_nibble" 8 240 "int8()" `1067 
V L "n" 8 242 "int8" `1071 
C L "lcd_read_nibble" 8 2 1 "FUNCTION"
V L "n" 8 256 "int8" `1073 
F G "lcd_send_nibble" 8 257 "void(int8 n)" `1072 
C L "lcd_send_nibble" 8 2 1 "FUNCTION"
V L "address" 8 274 "int8" `1075 
V L "n" 8 274 "int8" `1076 
F G "lcd_send_byte" 8 275 "void(int8 address,int8 n)" `1074 
F G "lcd_init" 8 300 "void()" `1077 
V L "i" 8 301 "int8" `1078 
V L "LCD_INIT_STRING" 8 302 "int8[4]" `1079 
C L "lcd_init" 8 2 2 "FUNCTION"
V L "x" 8 345 "int8" `1081 
V L "y" 8 345 "int8" `1082 
F G "lcd_gotoxy" 8 346 "void(int8 x,int8 y)" `1080 
V L "address" 8 347 "int8" `1083 
V L "c" 8 363 "int8" `1085 
F G "lcd_putc" 8 364 "void(int8 c)" `1084 
V L "x" 8 406 "int8" `1087 
V L "y" 8 406 "int8" `1088 
F G "lcd_getc" 8 407 "int8(int8 x,int8 y)" `1086 
V L "value" 8 408 "int8" `1089 
C L "lcd_getc" 8 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 8 2 5 "FUNCTION"
V L "which" 8 424 "int8" `1091 
V L "ptr" 8 424 "*int8" `1092 
F G "lcd_set_cgram_char" 8 425 "void(int8 which,*int8 ptr)" `1090 
V L "i" 8 426 "int8" `1093 
C L "lcd_set_cgram_char" 8 2 1 "FUNCTION"
V L "on" 8 443 "int8" `1095 
F G "lcd_cursor_on" 8 444 "void(int8 on)" `1094 
C L "lcd_cursor_on" 8 2 1 "FUNCTION"
C L "lcd_cursor_on" 8 2 1 "FUNCTION"
D G "Speaker" 9 1 "PIN_B2" "Altavoz conectado a RB0"
V L "frecuencia" 9 2 "int16" `1097 
V L "duracion" 9 2 "int16" `1098 
F G "Sound" 9 2 "void(int16 frecuencia,int16 duracion)" `1096 
V L "mS_Transcurridos" 9 4 "int16" `1099 
V L "CiclosL" 9 5 "int16" `1100 
V L "uS" 9 6 "int16" `1101 
V L "tmp" 9 7 "int32" `1102  "si la frecuancia se encuentra entre los margenes de 20Hz y 20 KHz se ejecuta"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 2 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 1 "FUNCTION"
C L "Sound" 9 8 2 "FUNCTION"
C G "" 10 14 1 "*"
V G "ID_CONNETION" 10 15 "int8[2]" `1106 
V G "COMMAND" 10 16 "int8[2]" `1107 
V G "DATA_COMMAND" 10 17 "int8[50]" `1108 
V G "LEN_DATA_COMMAND" 10 18 "int16" `1109 
V G "flag_Resp_CMD" 10 22 "int8" `1110 
V G "flag_Resp_IPD" 10 23 "int8" `1111 
V G "flag_Resp_StartGetData" 10 24 "int8" `1112 
V G "flag_Resp_Ready" 10 25 "int8" `1113 
V G "flag_Pos_Resp_CMD" 10 28 "int8" `1114 
V G "flag_Pos_Resp_IPD" 10 29 "int8" `1115 
V G "flag_Pos_Resp_Data" 10 30 "int8" `1116 
C L "ESP8266_Get_IPD" 10 14 2 "FUNCTION"
V L "buffer" 10 36 "*int8" `1118 
F G "ESP8266_Get_IPD" 10 36 "void(*int8 buffer)" `1117 
V L "ESP8266_RESP_IPD" 10 38 "[5]" `1120 
V L "lenResp" 10 39 "int8" `1123 
C L "ESP8266_Get_IPD" 10 14 3 "FUNCTION"
C L "ESP8266_Get_IPD" 10 14 2 "FUNCTION"
C L "ESP8266_Get_IPD" 10 14 2 "FUNCTION"
C L "ESP8266_Get_IPD" 10 14 1 "FUNCTION"
C L "ESP8266_Get_IPD" 10 14 1 "FUNCTION"
C L "ESP8266_Get_CMD" 10 14 4 "FUNCTION"
V L "buffer" 10 77 "*int8" `1125 
F G "ESP8266_Get_CMD" 10 77 "void(*int8 buffer)" `1124 
V L "ESP8266_RESP_CMD" 10 79 "[4]" `1127 
V L "lenResp" 10 80 "int8" `1130 
C L "ESP8266_Get_CMD" 10 14 3 "FUNCTION"
C L "ESP8266_Get_CMD" 10 14 1 "FUNCTION"
C L "ESP8266_Get_CMD" 10 14 2 "FUNCTION"
C L "ESP8266_Get_CMD" 10 14 2 "FUNCTION"
C L "ESP8266_Get_CMD" 10 14 1 "FUNCTION"
C L "ESP8266_Get_CMD" 10 14 1 "FUNCTION"
C L "ESP8266_Get_Data" 10 14 4 "FUNCTION"
V L "buffer" 10 124 "*int8" `1132 
F G "ESP8266_Get_Data" 10 124 "void(*int8 buffer)" `1131  "Si el inicio la bandera de recepcion de comando esta"
C L "ESP8266_Get_Data" 10 14 2 "FUNCTION"
C L "ESP8266_Get_Data" 10 14 1 "FUNCTION"
C L "run_command_wifi" 10 14 3 "FUNCTION"
F G "run_command_wifi" 10 153 "int8()" `1134 
V L "reset" 10 154 "int8" `1135 
V L "optSelected" 10 154 "int8" `1136 
V L "counter" 10 154 "int8" `1137 
V L "idxRSTNC" 10 154 "int8" `1138 
V L "lenResponse" 10 154 "int8" `1139 
V L "response" 10 155 "int8[57]" `1140 
C L "run_command_wifi" 10 14 1 "FUNCTION"
C L "run_command_wifi" 10 160 1 "*"
C L "run_command_wifi" 10 160 1 "*"
C L "run_command_wifi" 10 160 1 "FUNCTION"
C L "run_command_wifi" 10 160 1 "FUNCTION"
C L "run_command_wifi" 10 179 1 "*"
C L "run_command_wifi" 10 179 1 "*"
C L "run_command_wifi" 10 179 1 "*"
C L "run_command_wifi" 10 179 1 "FUNCTION"
C L "run_command_wifi" 10 199 1 "*"
C L "run_command_wifi" 10 199 1 "*"
C L "run_command_wifi" 10 199 2 "FUNCTION"
C L "run_command_wifi" 10 199 1 "FUNCTION"
V L "idxNC" 10 214 "int8" `1157 
C L "run_command_wifi" 10 199 1 "FUNCTION"
C L "run_command_wifi" 10 199 1 "FUNCTION"
C L "run_command_wifi" 10 199 1 "FUNCTION"
C L "run_command_wifi" 10 199 1 "FUNCTION"
C L "run_command_wifi" 10 241 1 "*"
C L "run_command_wifi" 10 241 1 "*"
C L "run_command_wifi" 10 241 1 "FUNCTION"
C L "run_command_wifi" 10 241 1 "FUNCTION"
C L "run_command_wifi" 10 262 1 "*"
C L "run_command_wifi" 10 262 1 "*"
C L "run_command_wifi" 10 262 1 "FUNCTION"
C L "run_command_wifi" 10 262 1 "FUNCTION"
C L "run_command_wifi" 10 262 1 "FUNCTION"
C L "run_command_wifi" 10 284 1 "*"
C L "run_command_wifi" 10 284 1 "*"
C L "run_command_wifi" 10 284 1 "FUNCTION"
C L "run_command_wifi" 10 284 1 "FUNCTION"
C L "run_command_wifi" 10 360 1 "*"
C L "run_command_wifi" 10 360 1 "*"
C L "run_command_wifi" 10 360 1 "*"
V L "posIni" 10 369 "int8" `1170 
V L "posFin" 10 369 "int8" `1171 
C L "run_command_wifi" 10 360 1 "FUNCTION"
C L "run_command_wifi" 10 360 1 "FUNCTION"
C L "run_command_wifi" 10 360 1 "FUNCTION"
C L "run_command_wifi" 10 360 1 "FUNCTION"
C L "run_command_wifi" 10 391 1 "*"
C L "run_command_wifi" 10 391 1 "FUNCTION"
C L "run_command_wifi" 10 391 1 "FUNCTION"
V L "idxCb" 10 406 "int8" `1175 
C L "run_command_wifi" 10 391 1 "FUNCTION"
C L "run_command_wifi" 10 391 1 "FUNCTION"
C G "" 11 15 1 "*"
D G "CHPD_ESP8266" 11 27 "PIN_B3"
D G "CMD_MODE" 11 28 "1"
D G "CMD_DO_CONN" 11 29 "2"
D G "CMD_CONN" 11 30 "3"
D G "READY_RESPONSE_WIFI" 11 31 "4"
D G "CMD_GET_IP_FROM_MENU" 11 32 "5"
D G "CMD_GET_AP_INFO_FROM_MENU" 11 33 "6"
D G "CMD_GET_STA_INFO_FROM_MENU" 11 34 "7"
V G "Valid" 11 37 "int8" `1176 
V G "CWJAP" 11 38 "int8" `1178 
V G "NoAp" 11 39 "int8" `1180 
V G "Connected" 11 40 "int8" `1182 
V G "Fail" 11 41 "int8" `1184 
V G "Error" 11 42 "int8" `1186 
C L "getIP" 11 15 1 "FUNCTION"
V L "buffer" 11 45 "int8" `1189 
f G "getIP" 11 45 "void(int8 buffer)" `1188 
V L "buffer" 11 46 "int8" `1191 
f G "getAPInfo" 11 46 "void(int8 buffer)" `1190 
V L "buffer" 11 47 "int8" `1193 
f G "getSTAInfo" 11 47 "void(int8 buffer)" `1192 
f G "waitResp" 11 48 "int8()" `1194 
V L "buffer" 11 49 "int8" `1196 
V L "flag_resp" 11 49 "int8" `1197 
f G "waitRespMajor" 11 49 "void(int8 buffer,int8 flag_resp)" `1195  "* BANDERAS MODOS DE FUNCIONAMIENTO **"
V G "CMD_RUN" 11 52 "int8" `1198 
V G "resp_Pos" 11 53 "int8" `1199 
V G "resp_Flag" 11 54 "int8" `1200 
V G "countResp" 11 55 "int8" `1201 
C L "waitRespMajor" 11 15 1 "FUNCTION"
V G "buffer_flag_Resp" 11 57 "int8[2][6]" `1202 
C L "waitRespMajor" 11 15 1 "FUNCTION"
C L "waitRespMajor" 11 15 1 "FUNCTION"
V G "buffer_Resp_CMD" 11 63 "int8[5][16]" `1204 
C L "waitRespMajor" 11 15 1 "FUNCTION"
C L "waitRespMajor" 11 15 1 "FUNCTION"
C L "waitRespMajor" 11 15 1 "FUNCTION"
C L "waitRespMajor" 11 15 1 "FUNCTION"
C L "waitRespMajor" 11 15 1 "FUNCTION"
V G "flag_Resp_Get_IP_CMD" 11 72 "int8" `1206 
V G "flag_Pos_Get_IP_CMD" 11 73 "int8" `1207 
V G "flag_Resp_Get_AP_Info_CMD" 11 75 "int8" `1208 
V G "flag_Pos_Get_AP_Info_CMD" 11 76 "int8" `1209 
V G "flag_Resp_Get_STA_Info_CMD" 11 78 "int8" `1210 
V G "flag_Pos_Get_STA_Info_CMD" 11 79 "int8" `1211 
C L "waitRespMajor" 11 15 1 "FUNCTION"
V G "modeStar" 11 82 "int8" `1212 
V G "SSIDAndKey" 11 83 "int8[50]" `1213  "Inicializa el modulo*"
F G "esp8266_init" 11 87 "void()" `1214 
V L "resp" 11 88 "int8" `1215 
C L "esp8266_init" 11 15 2 "FUNCTION"
C L "esp8266_init" 11 15 1 "FUNCTION"
C L "esp8266_init" 11 15 1 "FUNCTION"
C L "esp8266_init" 11 15 2 "FUNCTION"
C L "esp8266_init" 11 15 1 "FUNCTION"
V L "idxRE" 11 120 "int8" `1218 
C L "esp8266_init" 11 15 1 "FUNCTION"
C L "esp8266_init" 11 15 1 "FUNCTION"
C L "esp8266_init" 11 15 2 "FUNCTION"
C L "ESP8266_PROCCESS_RESPONSE" 11 15 2 "FUNCTION"
V L "buffer" 11 163 "int8" `1228 
F G "ESP8266_PROCCESS_RESPONSE" 11 163 "void(int8 buffer)" `1227  "Seleciona la funcion de confirmacion de la respuesta"
C L "ESP8266_PROCCESS_RESPONSE" 11 15 1 "FUNCTION"
C L "waitResp" 11 15 1 "FUNCTION"
C L "waitResp" 11 208 1 "*"
C L "waitResp" 11 208 1 "*"
C L "waitResp" 11 208 1 "*"
C L "waitResp" 11 208 1 "*"
F G "waitResp" 11 215 "int8()" `1194 
V L "ret" 11 216 "int8" `1229 
V L "idx" 11 216 "int8" `1230 
C L "waitResp" 11 208 2 "FUNCTION"
C L "waitResp" 11 208 1 "FUNCTION"
C L "waitResp" 11 208 1 "FUNCTION"
C L "waitRespMajor" 11 208 1 "FUNCTION"
C L "waitRespMajor" 11 241 10 "*"
V L "buffer" 11 257 "int8" `1196 
V L "flag_resp" 11 257 "int8" `1233 
F G "waitRespMajor" 11 258 "void(int8 buffer,int8 flag_resp)" `1195 
V L "strResp" 11 259 "int8[10]" `1231 
V L "lenResp" 11 260 "int8" `1232 
V L "restartFlag" 11 260 "int8" `1233 
C L "waitRespMajor" 11 241 3 "FUNCTION"
C L "waitRespMajor" 11 241 2 "FUNCTION"
C L "waitRespMajor" 11 241 1 "FUNCTION"
C L "waitRespMajor" 11 241 2 "FUNCTION"
C L "waitRespMajor" 11 241 2 "FUNCTION"
C L "waitRespMajor" 11 241 1 "FUNCTION"
C L "getIP" 11 323 1 "*"
V L "buffer" 11 327 "int8" `1241 
F G "getIP" 11 328 "void(int8 buffer)" `1188 
V L "END_GET_IP_CMD" 11 329 "int8" `1240 
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 2 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getIP" 11 323 1 "FUNCTION"
C L "getAPInfo" 11 323 1 "FUNCTION"
C L "getAPInfo" 11 380 1 "*"
V L "buffer" 11 384 "int8" `1244 
F G "getAPInfo" 11 385 "void(int8 buffer)" `1190  "bandera de AP_First_Data esta habilitado"
C L "getAPInfo" 11 380 1 "FUNCTION"
C L "getAPInfo" 11 380 1 "FUNCTION"
C L "getSTAInfo" 11 417 1 "*"
V L "buffer" 11 421 "int8" `1245 
F G "getSTAInfo" 11 422 "void(int8 buffer)" `1192  "bandera de AP_First_Data esta habilitado"
C L "getSTAInfo" 11 417 1 "FUNCTION"
C L "getSTAInfo" 11 417 1 "FUNCTION"
D G "BEEP" 12 16 "Sound(1209,20)"
D G "MENU_START" 12 19 "0"
D G "MENU_ON" 12 20 "1"
D G "MENU_OFF" 12 21 "2"
D G "MENU_SETUP" 12 22 "3"
D G "OPT_SHOW_STA_IP" 12 25 "0"
D G "OPT_SHOW_STA_SSID" 12 26 "1"
D G "OPT_SHOW_AP_SSID" 12 27 "2"
D G "OPT_SHOW_AP_KEY" 12 28 "3"
D G "OPT_SHOW_AP_IP" 12 29 "4"
D G "OPT_MODE_AP" 12 30 "5"
D G "OPT_RESET_ALL" 12 31 "6"
D G "OPT_BACKLIGH" 12 32 "7"
D G "OPT_EXIT" 12 33 "8"
D G "MODE_CLIENT" 12 36 "0"
D G "MODE_AP" 12 37 "1"
D G "MODE_CLIENT_AP" 12 38 "2"
D G "MODE_EXIT" 12 39 "3"
V G "optMenuStart" 12 42 "[4][16]" `1244 
V G "optMenuOn" 12 48 "int8[10][11]" `1248 
V G "optMenuSetup" 12 60 "[9][17]" `1250 
V G "optMenuModo" 12 72 "[5][14]" `1254 
C L "getMenuStart" 12 35 1 "FUNCTION"
f G "getMenuStart" 12 79 "int8()" `1258 
f G "pressExit" 12 80 "void()" `1259 
f G "showBottonMenu" 12 81 "void()" `1260 
f G "getMenuOn" 12 82 "int8()" `1261 
f G "getMenuOff" 12 83 "int8()" `1262 
f G "getMenuSetup" 12 84 "int8()" `1263 
V L "optSelect" 12 85 "int8" `1265 
f G "executeSetup" 12 85 "void(int8 optSelect)" `1264 
f G "setMenuModo" 12 86 "void()" `1266  "* VARIABLES GENERALS **"
V G "countOptMenuStart" 12 89 "int8" `1267 
V G "countOptMenuOn" 12 90 "int8" `1268 
V G "countOptMenuOff" 12 91 "int8" `1269 
V G "countOptMenuSetup" 12 92 "int8" `1270 
C L "setMenuModo" 12 35 1 "FUNCTION"
V G "countOptMenuModo" 12 94 "int8" `1271 
C L "setMenuModo" 12 35 1 "FUNCTION"
F G "getNameMenusOutput" 12 100 "void()" `1272 
V L "posIni" 12 101 "int8" `1273 
V L "hasData" 12 102 "int8" `1274 
V L "idx" 12 107 "int8" `1275 
V L "idxChar" 12 114 "int8" `1276 
C L "getMenuStart" 12 35 2 "FUNCTION"
F G "getMenuStart" 12 133 "int8()" `1258 
V L "optSelected" 12 134 "int8" `1277 
V L "exit" 12 135 "int8" `1278 
C L "getMenuStart" 12 141 1 "*"
C L "getMenuStart" 12 141 1 "*"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "getMenuStart" 12 141 2 "FUNCTION"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "getMenuStart" 12 141 2 "FUNCTION"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "getMenuStart" 12 141 1 "FUNCTION"
C L "pressExit" 12 141 2 "FUNCTION"
F G "pressExit" 12 184 "void()" `1259 
V L "exit" 12 185 "int8" `1282 
C L "pressExit" 12 190 1 "*"
C L "pressExit" 12 190 1 "FUNCTION"
C L "pressExit" 12 190 1 "FUNCTION"
C L "showBottonMenu" 12 190 3 "FUNCTION"
F G "showBottonMenu" 12 208 "void()" `1260 
C L "getMenuOn" 12 190 1 "FUNCTION"
F G "getMenuOn" 12 216 "int8()" `1261 
V L "optSelected" 12 217 "int8" `1285 
V L "exit" 12 218 "int8" `1286 
C L "getMenuOn" 12 190 1 "FUNCTION"
C L "getMenuOn" 12 226 1 "*"
C L "getMenuOn" 12 226 1 "*"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 2 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 2 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOn" 12 226 1 "FUNCTION"
C L "getMenuOff" 12 226 2 "FUNCTION"
F G "getMenuOff" 12 273 "int8()" `1262 
V L "optSelected" 12 274 "int8" `1292 
V L "exit" 12 275 "int8" `1293 
C L "getMenuOff" 12 226 1 "FUNCTION"
C L "getMenuOff" 12 283 1 "*"
C L "getMenuOff" 12 283 1 "*"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 2 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 2 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuOff" 12 283 1 "FUNCTION"
C L "getMenuSetup" 12 283 2 "FUNCTION"
F G "getMenuSetup" 12 331 "int8()" `1263 
V L "optSelected" 12 333 "int8" `1296 
V L "exit" 12 334 "int8" `1297 
C L "getMenuSetup" 12 283 1 "FUNCTION"
C L "getMenuSetup" 12 342 1 "*"
C L "getMenuSetup" 12 342 1 "*"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 2 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 2 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "getMenuSetup" 12 342 1 "FUNCTION"
C L "executeSetup" 12 342 2 "FUNCTION"
V L "optSelect" 12 395 "int8" `1302 
F G "executeSetup" 12 395 "void(int8 optSelect)" `1264 
V L "idxNC" 12 459 "int8" `1320 
C L "setMenuModo" 12 342 1 "FUNCTION"
F G "setMenuModo" 12 499 "void()" `1266 
V L "optSelected" 12 500 "int8" `1328 
V L "exit" 12 501 "int8" `1329 
C L "setMenuModo" 12 342 1 "FUNCTION"
C L "setMenuModo" 12 509 1 "*"
C L "setMenuModo" 12 509 1 "*"
C L "setMenuModo" 12 509 1 "FUNCTION"
C L "setMenuModo" 12 509 1 "FUNCTION"
C L "setMenuModo" 12 509 2 "FUNCTION"
C L "setMenuModo" 12 509 1 "FUNCTION"
C L "setMenuModo" 12 509 2 "FUNCTION"
C L "setMenuModo" 12 509 1 "FUNCTION"
C L "setMenuModo" 12 509 1 "FUNCTION"
C L "setMenuModo" 12 509 3 "FUNCTION"
C L "setMenuModo" 12 509 1 "FUNCTION"
C L "setMenuModo" 12 509 1 "FUNCTION"
V G "menuActive" 0 24 "int8" `1340 
C L "RDA_isr" 0 26 3 "*"
F G "RDA_isr" 0 33 "void()" `1341 
V L "buffer" 0 34 "int8" `1342 
C L "MAIN" 0 37 1 "*"
F G "MAIN" 0 42 "void()" `1343  "Activa las resistencias de Pull-Up y configura el puerto"
C L "MAIN" 0 37 1 "FUNCTION"
V L "idxOff" 0 52 "int8" `1346 
C L "MAIN" 0 37 2 "FUNCTION"
C L "MAIN" 0 37 3 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
C L "MAIN" 0 37 1 "FUNCTION"
V L "loop" 0 83 "int8" `1349 
C L "MAIN" 0 37 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
